// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: option_theo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kohinoor.Protos {

  /// <summary>Holder for reflection information generated from option_theo.proto</summary>
  public static partial class OptionTheoReflection {

    #region Descriptor
    /// <summary>File descriptor for option_theo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OptionTheoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFvcHRpb25fdGhlby5wcm90bxIPS29oaW5vb3IuUHJvdG9zIvoECgpPcHRp",
            "b25UaGVvEg8KB3NlcV9udW0YASABKA0SEQoJc2VuZF90aW1lGAIgASgEEhYK",
            "DmZyYW1ld29ya190aW1lGAMgASgEEhoKEmNhbGxfaW5zdHJ1bWVudF9pZBgE",
            "IAEoBBIZChFwdXRfaW5zdHJ1bWVudF9pZBgFIAEoBBIOCgZzdHJpa2UYBiAB",
            "KAESDwoHZm9yd2FyZBgHIAEoARIQCghkaXNjb3VudBgIIAEoARIWCg5iaWRf",
            "cHJpY2VfY2FsbBgJIAEoARIZChFiaWRfcXVhbnRpdHlfY2FsbBgKIAEoAxIW",
            "Cg5hc2tfcHJpY2VfY2FsbBgLIAEoARIZChFhc2tfcXVhbnRpdHlfY2FsbBgM",
            "IAEoAxIWCg5lc3RfcHJpY2VfY2FsbBgNIAEoARIVCg1iaWRfcHJpY2VfcHV0",
            "GA4gASgBEhgKEGJpZF9xdWFudGl0eV9wdXQYDyABKAMSFQoNYXNrX3ByaWNl",
            "X3B1dBgQIAEoARIYChBhc2tfcXVhbnRpdHlfcHV0GBEgASgDEhUKDWVzdF9w",
            "cmljZV9wdXQYEiABKAESEgoKZXhwaXJhdGlvbhgTIAEoBBILCgN2b2wYFCAB",
            "KAESCQoBehgVIAEoARIMCgR2ZWdhGBYgASgBEhIKCm9vbV9zcHJlYWQYFyAB",
            "KAESDwoHZml0X3ZvbBgYIAEoARIWCg5maXRfcHJpY2VfY2FsbBgZIAEoARIV",
            "Cg1maXRfcHJpY2VfcHV0GBogASgBEhYKDmZpdF9kZWx0YV9jYWxsGBsgASgB",
            "EhUKDWZpdF9kZWx0YV9wdXQYHCABKAESEgoKdW5kZXJseWluZxgdIAEoCWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Kohinoor.Protos.OptionTheo), global::Kohinoor.Protos.OptionTheo.Parser, new[]{ "SeqNum", "SendTime", "FrameworkTime", "CallInstrumentId", "PutInstrumentId", "Strike", "Forward", "Discount", "BidPriceCall", "BidQuantityCall", "AskPriceCall", "AskQuantityCall", "EstPriceCall", "BidPricePut", "BidQuantityPut", "AskPricePut", "AskQuantityPut", "EstPricePut", "Expiration", "Vol", "Z", "Vega", "OomSpread", "FitVol", "FitPriceCall", "FitPricePut", "FitDeltaCall", "FitDeltaPut", "Underlying" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OptionTheo : pb::IMessage<OptionTheo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionTheo> _parser = new pb::MessageParser<OptionTheo>(() => new OptionTheo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionTheo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kohinoor.Protos.OptionTheoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionTheo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionTheo(OptionTheo other) : this() {
      seqNum_ = other.seqNum_;
      sendTime_ = other.sendTime_;
      frameworkTime_ = other.frameworkTime_;
      callInstrumentId_ = other.callInstrumentId_;
      putInstrumentId_ = other.putInstrumentId_;
      strike_ = other.strike_;
      forward_ = other.forward_;
      discount_ = other.discount_;
      bidPriceCall_ = other.bidPriceCall_;
      bidQuantityCall_ = other.bidQuantityCall_;
      askPriceCall_ = other.askPriceCall_;
      askQuantityCall_ = other.askQuantityCall_;
      estPriceCall_ = other.estPriceCall_;
      bidPricePut_ = other.bidPricePut_;
      bidQuantityPut_ = other.bidQuantityPut_;
      askPricePut_ = other.askPricePut_;
      askQuantityPut_ = other.askQuantityPut_;
      estPricePut_ = other.estPricePut_;
      expiration_ = other.expiration_;
      vol_ = other.vol_;
      z_ = other.z_;
      vega_ = other.vega_;
      oomSpread_ = other.oomSpread_;
      fitVol_ = other.fitVol_;
      fitPriceCall_ = other.fitPriceCall_;
      fitPricePut_ = other.fitPricePut_;
      fitDeltaCall_ = other.fitDeltaCall_;
      fitDeltaPut_ = other.fitDeltaPut_;
      underlying_ = other.underlying_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionTheo Clone() {
      return new OptionTheo(this);
    }

    /// <summary>Field number for the "seq_num" field.</summary>
    public const int SeqNumFieldNumber = 1;
    private uint seqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SeqNum {
      get { return seqNum_; }
      set {
        seqNum_ = value;
      }
    }

    /// <summary>Field number for the "send_time" field.</summary>
    public const int SendTimeFieldNumber = 2;
    private ulong sendTime_;
    /// <summary>
    /// machine send_time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    /// <summary>Field number for the "framework_time" field.</summary>
    public const int FrameworkTimeFieldNumber = 3;
    private ulong frameworkTime_;
    /// <summary>
    /// framework_time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FrameworkTime {
      get { return frameworkTime_; }
      set {
        frameworkTime_ = value;
      }
    }

    /// <summary>Field number for the "call_instrument_id" field.</summary>
    public const int CallInstrumentIdFieldNumber = 4;
    private ulong callInstrumentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong CallInstrumentId {
      get { return callInstrumentId_; }
      set {
        callInstrumentId_ = value;
      }
    }

    /// <summary>Field number for the "put_instrument_id" field.</summary>
    public const int PutInstrumentIdFieldNumber = 5;
    private ulong putInstrumentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong PutInstrumentId {
      get { return putInstrumentId_; }
      set {
        putInstrumentId_ = value;
      }
    }

    /// <summary>Field number for the "strike" field.</summary>
    public const int StrikeFieldNumber = 6;
    private double strike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Strike {
      get { return strike_; }
      set {
        strike_ = value;
      }
    }

    /// <summary>Field number for the "forward" field.</summary>
    public const int ForwardFieldNumber = 7;
    private double forward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    /// <summary>Field number for the "discount" field.</summary>
    public const int DiscountFieldNumber = 8;
    private double discount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Discount {
      get { return discount_; }
      set {
        discount_ = value;
      }
    }

    /// <summary>Field number for the "bid_price_call" field.</summary>
    public const int BidPriceCallFieldNumber = 9;
    private double bidPriceCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BidPriceCall {
      get { return bidPriceCall_; }
      set {
        bidPriceCall_ = value;
      }
    }

    /// <summary>Field number for the "bid_quantity_call" field.</summary>
    public const int BidQuantityCallFieldNumber = 10;
    private long bidQuantityCall_;
    /// <summary>
    /// Assuming qty_t is int64
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BidQuantityCall {
      get { return bidQuantityCall_; }
      set {
        bidQuantityCall_ = value;
      }
    }

    /// <summary>Field number for the "ask_price_call" field.</summary>
    public const int AskPriceCallFieldNumber = 11;
    private double askPriceCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AskPriceCall {
      get { return askPriceCall_; }
      set {
        askPriceCall_ = value;
      }
    }

    /// <summary>Field number for the "ask_quantity_call" field.</summary>
    public const int AskQuantityCallFieldNumber = 12;
    private long askQuantityCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AskQuantityCall {
      get { return askQuantityCall_; }
      set {
        askQuantityCall_ = value;
      }
    }

    /// <summary>Field number for the "est_price_call" field.</summary>
    public const int EstPriceCallFieldNumber = 13;
    private double estPriceCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EstPriceCall {
      get { return estPriceCall_; }
      set {
        estPriceCall_ = value;
      }
    }

    /// <summary>Field number for the "bid_price_put" field.</summary>
    public const int BidPricePutFieldNumber = 14;
    private double bidPricePut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BidPricePut {
      get { return bidPricePut_; }
      set {
        bidPricePut_ = value;
      }
    }

    /// <summary>Field number for the "bid_quantity_put" field.</summary>
    public const int BidQuantityPutFieldNumber = 15;
    private long bidQuantityPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BidQuantityPut {
      get { return bidQuantityPut_; }
      set {
        bidQuantityPut_ = value;
      }
    }

    /// <summary>Field number for the "ask_price_put" field.</summary>
    public const int AskPricePutFieldNumber = 16;
    private double askPricePut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AskPricePut {
      get { return askPricePut_; }
      set {
        askPricePut_ = value;
      }
    }

    /// <summary>Field number for the "ask_quantity_put" field.</summary>
    public const int AskQuantityPutFieldNumber = 17;
    private long askQuantityPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AskQuantityPut {
      get { return askQuantityPut_; }
      set {
        askQuantityPut_ = value;
      }
    }

    /// <summary>Field number for the "est_price_put" field.</summary>
    public const int EstPricePutFieldNumber = 18;
    private double estPricePut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EstPricePut {
      get { return estPricePut_; }
      set {
        estPricePut_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 19;
    private ulong expiration_;
    /// <summary>
    /// Assuming epoch_ns_t is uint64
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "vol" field.</summary>
    public const int VolFieldNumber = 20;
    private double vol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Vol {
      get { return vol_; }
      set {
        vol_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 21;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "vega" field.</summary>
    public const int VegaFieldNumber = 22;
    private double vega_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Vega {
      get { return vega_; }
      set {
        vega_ = value;
      }
    }

    /// <summary>Field number for the "oom_spread" field.</summary>
    public const int OomSpreadFieldNumber = 23;
    private double oomSpread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OomSpread {
      get { return oomSpread_; }
      set {
        oomSpread_ = value;
      }
    }

    /// <summary>Field number for the "fit_vol" field.</summary>
    public const int FitVolFieldNumber = 24;
    private double fitVol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitVol {
      get { return fitVol_; }
      set {
        fitVol_ = value;
      }
    }

    /// <summary>Field number for the "fit_price_call" field.</summary>
    public const int FitPriceCallFieldNumber = 25;
    private double fitPriceCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitPriceCall {
      get { return fitPriceCall_; }
      set {
        fitPriceCall_ = value;
      }
    }

    /// <summary>Field number for the "fit_price_put" field.</summary>
    public const int FitPricePutFieldNumber = 26;
    private double fitPricePut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitPricePut {
      get { return fitPricePut_; }
      set {
        fitPricePut_ = value;
      }
    }

    /// <summary>Field number for the "fit_delta_call" field.</summary>
    public const int FitDeltaCallFieldNumber = 27;
    private double fitDeltaCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitDeltaCall {
      get { return fitDeltaCall_; }
      set {
        fitDeltaCall_ = value;
      }
    }

    /// <summary>Field number for the "fit_delta_put" field.</summary>
    public const int FitDeltaPutFieldNumber = 28;
    private double fitDeltaPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitDeltaPut {
      get { return fitDeltaPut_; }
      set {
        fitDeltaPut_ = value;
      }
    }

    /// <summary>Field number for the "underlying" field.</summary>
    public const int UnderlyingFieldNumber = 29;
    private string underlying_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Underlying {
      get { return underlying_; }
      set {
        underlying_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionTheo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionTheo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeqNum != other.SeqNum) return false;
      if (SendTime != other.SendTime) return false;
      if (FrameworkTime != other.FrameworkTime) return false;
      if (CallInstrumentId != other.CallInstrumentId) return false;
      if (PutInstrumentId != other.PutInstrumentId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Strike, other.Strike)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Forward, other.Forward)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Discount, other.Discount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidPriceCall, other.BidPriceCall)) return false;
      if (BidQuantityCall != other.BidQuantityCall) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskPriceCall, other.AskPriceCall)) return false;
      if (AskQuantityCall != other.AskQuantityCall) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EstPriceCall, other.EstPriceCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidPricePut, other.BidPricePut)) return false;
      if (BidQuantityPut != other.BidQuantityPut) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskPricePut, other.AskPricePut)) return false;
      if (AskQuantityPut != other.AskQuantityPut) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EstPricePut, other.EstPricePut)) return false;
      if (Expiration != other.Expiration) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Vol, other.Vol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Vega, other.Vega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OomSpread, other.OomSpread)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitVol, other.FitVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitPriceCall, other.FitPriceCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitPricePut, other.FitPricePut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitDeltaCall, other.FitDeltaCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitDeltaPut, other.FitDeltaPut)) return false;
      if (Underlying != other.Underlying) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SeqNum != 0) hash ^= SeqNum.GetHashCode();
      if (SendTime != 0UL) hash ^= SendTime.GetHashCode();
      if (FrameworkTime != 0UL) hash ^= FrameworkTime.GetHashCode();
      if (CallInstrumentId != 0UL) hash ^= CallInstrumentId.GetHashCode();
      if (PutInstrumentId != 0UL) hash ^= PutInstrumentId.GetHashCode();
      if (Strike != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Strike);
      if (Forward != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Forward);
      if (Discount != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Discount);
      if (BidPriceCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidPriceCall);
      if (BidQuantityCall != 0L) hash ^= BidQuantityCall.GetHashCode();
      if (AskPriceCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskPriceCall);
      if (AskQuantityCall != 0L) hash ^= AskQuantityCall.GetHashCode();
      if (EstPriceCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EstPriceCall);
      if (BidPricePut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidPricePut);
      if (BidQuantityPut != 0L) hash ^= BidQuantityPut.GetHashCode();
      if (AskPricePut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskPricePut);
      if (AskQuantityPut != 0L) hash ^= AskQuantityPut.GetHashCode();
      if (EstPricePut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EstPricePut);
      if (Expiration != 0UL) hash ^= Expiration.GetHashCode();
      if (Vol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Vol);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (Vega != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Vega);
      if (OomSpread != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OomSpread);
      if (FitVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitVol);
      if (FitPriceCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitPriceCall);
      if (FitPricePut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitPricePut);
      if (FitDeltaCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitDeltaCall);
      if (FitDeltaPut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitDeltaPut);
      if (Underlying.Length != 0) hash ^= Underlying.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SeqNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SeqNum);
      }
      if (SendTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SendTime);
      }
      if (FrameworkTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FrameworkTime);
      }
      if (CallInstrumentId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CallInstrumentId);
      }
      if (PutInstrumentId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(PutInstrumentId);
      }
      if (Strike != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Strike);
      }
      if (Forward != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Forward);
      }
      if (Discount != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Discount);
      }
      if (BidPriceCall != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(BidPriceCall);
      }
      if (BidQuantityCall != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(BidQuantityCall);
      }
      if (AskPriceCall != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AskPriceCall);
      }
      if (AskQuantityCall != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AskQuantityCall);
      }
      if (EstPriceCall != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(EstPriceCall);
      }
      if (BidPricePut != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(BidPricePut);
      }
      if (BidQuantityPut != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(BidQuantityPut);
      }
      if (AskPricePut != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(AskPricePut);
      }
      if (AskQuantityPut != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(AskQuantityPut);
      }
      if (EstPricePut != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(EstPricePut);
      }
      if (Expiration != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(Expiration);
      }
      if (Vol != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Vol);
      }
      if (Z != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(Z);
      }
      if (Vega != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Vega);
      }
      if (OomSpread != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(OomSpread);
      }
      if (FitVol != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(FitVol);
      }
      if (FitPriceCall != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(FitPriceCall);
      }
      if (FitPricePut != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(FitPricePut);
      }
      if (FitDeltaCall != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(FitDeltaCall);
      }
      if (FitDeltaPut != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(FitDeltaPut);
      }
      if (Underlying.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Underlying);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SeqNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SeqNum);
      }
      if (SendTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SendTime);
      }
      if (FrameworkTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FrameworkTime);
      }
      if (CallInstrumentId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CallInstrumentId);
      }
      if (PutInstrumentId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(PutInstrumentId);
      }
      if (Strike != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Strike);
      }
      if (Forward != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Forward);
      }
      if (Discount != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Discount);
      }
      if (BidPriceCall != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(BidPriceCall);
      }
      if (BidQuantityCall != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(BidQuantityCall);
      }
      if (AskPriceCall != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AskPriceCall);
      }
      if (AskQuantityCall != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AskQuantityCall);
      }
      if (EstPriceCall != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(EstPriceCall);
      }
      if (BidPricePut != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(BidPricePut);
      }
      if (BidQuantityPut != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(BidQuantityPut);
      }
      if (AskPricePut != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(AskPricePut);
      }
      if (AskQuantityPut != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(AskQuantityPut);
      }
      if (EstPricePut != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(EstPricePut);
      }
      if (Expiration != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(Expiration);
      }
      if (Vol != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Vol);
      }
      if (Z != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(Z);
      }
      if (Vega != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Vega);
      }
      if (OomSpread != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(OomSpread);
      }
      if (FitVol != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(FitVol);
      }
      if (FitPriceCall != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(FitPriceCall);
      }
      if (FitPricePut != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(FitPricePut);
      }
      if (FitDeltaCall != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(FitDeltaCall);
      }
      if (FitDeltaPut != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(FitDeltaPut);
      }
      if (Underlying.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Underlying);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SeqNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNum);
      }
      if (SendTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SendTime);
      }
      if (FrameworkTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FrameworkTime);
      }
      if (CallInstrumentId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallInstrumentId);
      }
      if (PutInstrumentId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PutInstrumentId);
      }
      if (Strike != 0D) {
        size += 1 + 8;
      }
      if (Forward != 0D) {
        size += 1 + 8;
      }
      if (Discount != 0D) {
        size += 1 + 8;
      }
      if (BidPriceCall != 0D) {
        size += 1 + 8;
      }
      if (BidQuantityCall != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BidQuantityCall);
      }
      if (AskPriceCall != 0D) {
        size += 1 + 8;
      }
      if (AskQuantityCall != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AskQuantityCall);
      }
      if (EstPriceCall != 0D) {
        size += 1 + 8;
      }
      if (BidPricePut != 0D) {
        size += 1 + 8;
      }
      if (BidQuantityPut != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BidQuantityPut);
      }
      if (AskPricePut != 0D) {
        size += 2 + 8;
      }
      if (AskQuantityPut != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskQuantityPut);
      }
      if (EstPricePut != 0D) {
        size += 2 + 8;
      }
      if (Expiration != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Expiration);
      }
      if (Vol != 0D) {
        size += 2 + 8;
      }
      if (Z != 0D) {
        size += 2 + 8;
      }
      if (Vega != 0D) {
        size += 2 + 8;
      }
      if (OomSpread != 0D) {
        size += 2 + 8;
      }
      if (FitVol != 0D) {
        size += 2 + 8;
      }
      if (FitPriceCall != 0D) {
        size += 2 + 8;
      }
      if (FitPricePut != 0D) {
        size += 2 + 8;
      }
      if (FitDeltaCall != 0D) {
        size += 2 + 8;
      }
      if (FitDeltaPut != 0D) {
        size += 2 + 8;
      }
      if (Underlying.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Underlying);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionTheo other) {
      if (other == null) {
        return;
      }
      if (other.SeqNum != 0) {
        SeqNum = other.SeqNum;
      }
      if (other.SendTime != 0UL) {
        SendTime = other.SendTime;
      }
      if (other.FrameworkTime != 0UL) {
        FrameworkTime = other.FrameworkTime;
      }
      if (other.CallInstrumentId != 0UL) {
        CallInstrumentId = other.CallInstrumentId;
      }
      if (other.PutInstrumentId != 0UL) {
        PutInstrumentId = other.PutInstrumentId;
      }
      if (other.Strike != 0D) {
        Strike = other.Strike;
      }
      if (other.Forward != 0D) {
        Forward = other.Forward;
      }
      if (other.Discount != 0D) {
        Discount = other.Discount;
      }
      if (other.BidPriceCall != 0D) {
        BidPriceCall = other.BidPriceCall;
      }
      if (other.BidQuantityCall != 0L) {
        BidQuantityCall = other.BidQuantityCall;
      }
      if (other.AskPriceCall != 0D) {
        AskPriceCall = other.AskPriceCall;
      }
      if (other.AskQuantityCall != 0L) {
        AskQuantityCall = other.AskQuantityCall;
      }
      if (other.EstPriceCall != 0D) {
        EstPriceCall = other.EstPriceCall;
      }
      if (other.BidPricePut != 0D) {
        BidPricePut = other.BidPricePut;
      }
      if (other.BidQuantityPut != 0L) {
        BidQuantityPut = other.BidQuantityPut;
      }
      if (other.AskPricePut != 0D) {
        AskPricePut = other.AskPricePut;
      }
      if (other.AskQuantityPut != 0L) {
        AskQuantityPut = other.AskQuantityPut;
      }
      if (other.EstPricePut != 0D) {
        EstPricePut = other.EstPricePut;
      }
      if (other.Expiration != 0UL) {
        Expiration = other.Expiration;
      }
      if (other.Vol != 0D) {
        Vol = other.Vol;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      if (other.Vega != 0D) {
        Vega = other.Vega;
      }
      if (other.OomSpread != 0D) {
        OomSpread = other.OomSpread;
      }
      if (other.FitVol != 0D) {
        FitVol = other.FitVol;
      }
      if (other.FitPriceCall != 0D) {
        FitPriceCall = other.FitPriceCall;
      }
      if (other.FitPricePut != 0D) {
        FitPricePut = other.FitPricePut;
      }
      if (other.FitDeltaCall != 0D) {
        FitDeltaCall = other.FitDeltaCall;
      }
      if (other.FitDeltaPut != 0D) {
        FitDeltaPut = other.FitDeltaPut;
      }
      if (other.Underlying.Length != 0) {
        Underlying = other.Underlying;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SeqNum = input.ReadUInt32();
            break;
          }
          case 16: {
            SendTime = input.ReadUInt64();
            break;
          }
          case 24: {
            FrameworkTime = input.ReadUInt64();
            break;
          }
          case 32: {
            CallInstrumentId = input.ReadUInt64();
            break;
          }
          case 40: {
            PutInstrumentId = input.ReadUInt64();
            break;
          }
          case 49: {
            Strike = input.ReadDouble();
            break;
          }
          case 57: {
            Forward = input.ReadDouble();
            break;
          }
          case 65: {
            Discount = input.ReadDouble();
            break;
          }
          case 73: {
            BidPriceCall = input.ReadDouble();
            break;
          }
          case 80: {
            BidQuantityCall = input.ReadInt64();
            break;
          }
          case 89: {
            AskPriceCall = input.ReadDouble();
            break;
          }
          case 96: {
            AskQuantityCall = input.ReadInt64();
            break;
          }
          case 105: {
            EstPriceCall = input.ReadDouble();
            break;
          }
          case 113: {
            BidPricePut = input.ReadDouble();
            break;
          }
          case 120: {
            BidQuantityPut = input.ReadInt64();
            break;
          }
          case 129: {
            AskPricePut = input.ReadDouble();
            break;
          }
          case 136: {
            AskQuantityPut = input.ReadInt64();
            break;
          }
          case 145: {
            EstPricePut = input.ReadDouble();
            break;
          }
          case 152: {
            Expiration = input.ReadUInt64();
            break;
          }
          case 161: {
            Vol = input.ReadDouble();
            break;
          }
          case 169: {
            Z = input.ReadDouble();
            break;
          }
          case 177: {
            Vega = input.ReadDouble();
            break;
          }
          case 185: {
            OomSpread = input.ReadDouble();
            break;
          }
          case 193: {
            FitVol = input.ReadDouble();
            break;
          }
          case 201: {
            FitPriceCall = input.ReadDouble();
            break;
          }
          case 209: {
            FitPricePut = input.ReadDouble();
            break;
          }
          case 217: {
            FitDeltaCall = input.ReadDouble();
            break;
          }
          case 225: {
            FitDeltaPut = input.ReadDouble();
            break;
          }
          case 234: {
            Underlying = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SeqNum = input.ReadUInt32();
            break;
          }
          case 16: {
            SendTime = input.ReadUInt64();
            break;
          }
          case 24: {
            FrameworkTime = input.ReadUInt64();
            break;
          }
          case 32: {
            CallInstrumentId = input.ReadUInt64();
            break;
          }
          case 40: {
            PutInstrumentId = input.ReadUInt64();
            break;
          }
          case 49: {
            Strike = input.ReadDouble();
            break;
          }
          case 57: {
            Forward = input.ReadDouble();
            break;
          }
          case 65: {
            Discount = input.ReadDouble();
            break;
          }
          case 73: {
            BidPriceCall = input.ReadDouble();
            break;
          }
          case 80: {
            BidQuantityCall = input.ReadInt64();
            break;
          }
          case 89: {
            AskPriceCall = input.ReadDouble();
            break;
          }
          case 96: {
            AskQuantityCall = input.ReadInt64();
            break;
          }
          case 105: {
            EstPriceCall = input.ReadDouble();
            break;
          }
          case 113: {
            BidPricePut = input.ReadDouble();
            break;
          }
          case 120: {
            BidQuantityPut = input.ReadInt64();
            break;
          }
          case 129: {
            AskPricePut = input.ReadDouble();
            break;
          }
          case 136: {
            AskQuantityPut = input.ReadInt64();
            break;
          }
          case 145: {
            EstPricePut = input.ReadDouble();
            break;
          }
          case 152: {
            Expiration = input.ReadUInt64();
            break;
          }
          case 161: {
            Vol = input.ReadDouble();
            break;
          }
          case 169: {
            Z = input.ReadDouble();
            break;
          }
          case 177: {
            Vega = input.ReadDouble();
            break;
          }
          case 185: {
            OomSpread = input.ReadDouble();
            break;
          }
          case 193: {
            FitVol = input.ReadDouble();
            break;
          }
          case 201: {
            FitPriceCall = input.ReadDouble();
            break;
          }
          case 209: {
            FitPricePut = input.ReadDouble();
            break;
          }
          case 217: {
            FitDeltaCall = input.ReadDouble();
            break;
          }
          case 225: {
            FitDeltaPut = input.ReadDouble();
            break;
          }
          case 234: {
            Underlying = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
