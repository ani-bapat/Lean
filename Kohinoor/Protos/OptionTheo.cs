// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: option_theo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Kohinoor.Protos {

  /// <summary>Holder for reflection information generated from option_theo.proto</summary>
  public static partial class OptionTheoReflection {

    #region Descriptor
    /// <summary>File descriptor for option_theo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OptionTheoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFvcHRpb25fdGhlby5wcm90bxIPS29oaW5vb3IuUHJvdG9zIosLCgpPcHRp",
            "b25UaGVvEg8KB3NlcV9udW0YASABKA0SEQoJc2VuZF90aW1lGAIgASgEEhYK",
            "DmZyYW1ld29ya190aW1lGAMgASgEEhoKEmNhbGxfaW5zdHJ1bWVudF9pZBgE",
            "IAEoBBIZChFwdXRfaW5zdHJ1bWVudF9pZBgFIAEoBBIOCgZzdHJpa2UYBiAB",
            "KAESDwoHZm9yd2FyZBgHIAEoARIQCghkaXNjb3VudBgIIAEoARIWCg5iaWRf",
            "cHJpY2VfY2FsbBgJIAEoARIZChFiaWRfcXVhbnRpdHlfY2FsbBgKIAEoAxIW",
            "Cg5hc2tfcHJpY2VfY2FsbBgLIAEoARIZChFhc2tfcXVhbnRpdHlfY2FsbBgM",
            "IAEoAxIWCg5lc3RfcHJpY2VfY2FsbBgNIAEoARIVCg1iaWRfcHJpY2VfcHV0",
            "GA4gASgBEhgKEGJpZF9xdWFudGl0eV9wdXQYDyABKAMSFQoNYXNrX3ByaWNl",
            "X3B1dBgQIAEoARIYChBhc2tfcXVhbnRpdHlfcHV0GBEgASgDEhUKDWVzdF9w",
            "cmljZV9wdXQYEiABKAESEgoKZXhwaXJhdGlvbhgTIAEoBBILCgN2b2wYFCAB",
            "KAESCgoCZDAYFSABKAESCwoDdHRlGBYgASgBEhQKDGZpdF9ub3JtX3ZvbBgX",
            "IAEoARIPCgdmaXRfdm9sGBggASgBEh8KF2ZpdF9ub3JtX3ZvbF9kbG9nc3Ry",
            "aWtlGBkgASgBEiAKGGZpdF9ub3JtX3ZvbF9kbG9nc3RyaWtlMhgaIAEoARIW",
            "Cg5maXRfcHJpY2VfY2FsbBgbIAEoARIVCg1maXRfcHJpY2VfcHV0GBwgASgB",
            "EhYKDmZpdF9kZWx0YV9jYWxsGB0gASgBEhUKDWZpdF9kZWx0YV9wdXQYHiAB",
            "KAESFQoNZml0X3ZlZ2FfY2FsbBgfIAEoARIUCgxmaXRfdmVnYV9wdXQYICAB",
            "KAESFgoOZml0X2dhbW1hX2NhbGwYISABKAESFQoNZml0X2dhbW1hX3B1dBgi",
            "IAEoARIWCg5maXRfY2hhcm1fY2FsbBgjIAEoARIVCg1maXRfY2hhcm1fcHV0",
            "GCQgASgBEhYKDmZpdF92YW5uYV9jYWxsGCUgASgBEhUKDWZpdF92YW5uYV9w",
            "dXQYJiABKAESGwoTZml0X3NrZXdfZGVsdGFfY2FsbBgnIAEoARIaChJmaXRf",
            "c2tld19kZWx0YV9wdXQYKCABKAESGwoTZml0X3NrZXdfZ2FtbWFfY2FsbBgp",
            "IAEoARIaChJmaXRfc2tld19nYW1tYV9wdXQYKiABKAESFgoOZml0X3RoZXRh",
            "X2NhbGwYKyABKAESFQoNZml0X3RoZXRhX3B1dBgsIAEoARIaChJmaXRfdm9s",
            "X3RoZXRhX2NhbGwYLSABKAESGQoRZml0X3ZvbF90aGV0YV9wdXQYLiABKAES",
            "HAoUcHJvYmFiaWxpdHlfaXRtX2NhbGwYLyABKAESGwoTcHJvYmFiaWxpdHlf",
            "aXRtX3B1dBgwIAEoARITCgtpbXBsaWVkX3BkZhgxIAEoARIQCgh2Y3JfYmFz",
            "ZRgyIAEoARIcChR2Y3Jfc2xvcGVfbXVsdGlwbGllchgzIAEoARIRCgl2Y3Jf",
            "dG90YWwYNCABKAESDwoHYXRtX3ZvbBg1IAEoARIaChJhdG1fdm9sX2Rsb2dz",
            "dHJpa2UYNiABKAESFgoOdm9sX2Rsb2dzdHJpa2UYNyABKAESFwoPdm9sX2Rs",
            "b2dzdHJpa2UyGDggASgBEhcKD3ZvbF9kbG9nZm9yd2FyZBg5IAEoARIYChB2",
            "b2xfZGxvZ2ZvcndhcmQyGDogASgBEhQKDGxvZ21vbmV5bmVzcxg7IAEoARIS",
            "Cgp1bmRlcmx5aW5nGDwgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Kohinoor.Protos.OptionTheo), global::Kohinoor.Protos.OptionTheo.Parser, new[]{ "SeqNum", "SendTime", "FrameworkTime", "CallInstrumentId", "PutInstrumentId", "Strike", "Forward", "Discount", "BidPriceCall", "BidQuantityCall", "AskPriceCall", "AskQuantityCall", "EstPriceCall", "BidPricePut", "BidQuantityPut", "AskPricePut", "AskQuantityPut", "EstPricePut", "Expiration", "Vol", "D0", "Tte", "FitNormVol", "FitVol", "FitNormVolDlogstrike", "FitNormVolDlogstrike2", "FitPriceCall", "FitPricePut", "FitDeltaCall", "FitDeltaPut", "FitVegaCall", "FitVegaPut", "FitGammaCall", "FitGammaPut", "FitCharmCall", "FitCharmPut", "FitVannaCall", "FitVannaPut", "FitSkewDeltaCall", "FitSkewDeltaPut", "FitSkewGammaCall", "FitSkewGammaPut", "FitThetaCall", "FitThetaPut", "FitVolThetaCall", "FitVolThetaPut", "ProbabilityItmCall", "ProbabilityItmPut", "ImpliedPdf", "VcrBase", "VcrSlopeMultiplier", "VcrTotal", "AtmVol", "AtmVolDlogstrike", "VolDlogstrike", "VolDlogstrike2", "VolDlogforward", "VolDlogforward2", "Logmoneyness", "Underlying" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class OptionTheo : pb::IMessage<OptionTheo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OptionTheo> _parser = new pb::MessageParser<OptionTheo>(() => new OptionTheo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OptionTheo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Kohinoor.Protos.OptionTheoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionTheo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionTheo(OptionTheo other) : this() {
      seqNum_ = other.seqNum_;
      sendTime_ = other.sendTime_;
      frameworkTime_ = other.frameworkTime_;
      callInstrumentId_ = other.callInstrumentId_;
      putInstrumentId_ = other.putInstrumentId_;
      strike_ = other.strike_;
      forward_ = other.forward_;
      discount_ = other.discount_;
      bidPriceCall_ = other.bidPriceCall_;
      bidQuantityCall_ = other.bidQuantityCall_;
      askPriceCall_ = other.askPriceCall_;
      askQuantityCall_ = other.askQuantityCall_;
      estPriceCall_ = other.estPriceCall_;
      bidPricePut_ = other.bidPricePut_;
      bidQuantityPut_ = other.bidQuantityPut_;
      askPricePut_ = other.askPricePut_;
      askQuantityPut_ = other.askQuantityPut_;
      estPricePut_ = other.estPricePut_;
      expiration_ = other.expiration_;
      vol_ = other.vol_;
      d0_ = other.d0_;
      tte_ = other.tte_;
      fitNormVol_ = other.fitNormVol_;
      fitVol_ = other.fitVol_;
      fitNormVolDlogstrike_ = other.fitNormVolDlogstrike_;
      fitNormVolDlogstrike2_ = other.fitNormVolDlogstrike2_;
      fitPriceCall_ = other.fitPriceCall_;
      fitPricePut_ = other.fitPricePut_;
      fitDeltaCall_ = other.fitDeltaCall_;
      fitDeltaPut_ = other.fitDeltaPut_;
      fitVegaCall_ = other.fitVegaCall_;
      fitVegaPut_ = other.fitVegaPut_;
      fitGammaCall_ = other.fitGammaCall_;
      fitGammaPut_ = other.fitGammaPut_;
      fitCharmCall_ = other.fitCharmCall_;
      fitCharmPut_ = other.fitCharmPut_;
      fitVannaCall_ = other.fitVannaCall_;
      fitVannaPut_ = other.fitVannaPut_;
      fitSkewDeltaCall_ = other.fitSkewDeltaCall_;
      fitSkewDeltaPut_ = other.fitSkewDeltaPut_;
      fitSkewGammaCall_ = other.fitSkewGammaCall_;
      fitSkewGammaPut_ = other.fitSkewGammaPut_;
      fitThetaCall_ = other.fitThetaCall_;
      fitThetaPut_ = other.fitThetaPut_;
      fitVolThetaCall_ = other.fitVolThetaCall_;
      fitVolThetaPut_ = other.fitVolThetaPut_;
      probabilityItmCall_ = other.probabilityItmCall_;
      probabilityItmPut_ = other.probabilityItmPut_;
      impliedPdf_ = other.impliedPdf_;
      vcrBase_ = other.vcrBase_;
      vcrSlopeMultiplier_ = other.vcrSlopeMultiplier_;
      vcrTotal_ = other.vcrTotal_;
      atmVol_ = other.atmVol_;
      atmVolDlogstrike_ = other.atmVolDlogstrike_;
      volDlogstrike_ = other.volDlogstrike_;
      volDlogstrike2_ = other.volDlogstrike2_;
      volDlogforward_ = other.volDlogforward_;
      volDlogforward2_ = other.volDlogforward2_;
      logmoneyness_ = other.logmoneyness_;
      underlying_ = other.underlying_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OptionTheo Clone() {
      return new OptionTheo(this);
    }

    /// <summary>Field number for the "seq_num" field.</summary>
    public const int SeqNumFieldNumber = 1;
    private uint seqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SeqNum {
      get { return seqNum_; }
      set {
        seqNum_ = value;
      }
    }

    /// <summary>Field number for the "send_time" field.</summary>
    public const int SendTimeFieldNumber = 2;
    private ulong sendTime_;
    /// <summary>
    /// machine send_time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    /// <summary>Field number for the "framework_time" field.</summary>
    public const int FrameworkTimeFieldNumber = 3;
    private ulong frameworkTime_;
    /// <summary>
    /// framework_time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FrameworkTime {
      get { return frameworkTime_; }
      set {
        frameworkTime_ = value;
      }
    }

    /// <summary>Field number for the "call_instrument_id" field.</summary>
    public const int CallInstrumentIdFieldNumber = 4;
    private ulong callInstrumentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong CallInstrumentId {
      get { return callInstrumentId_; }
      set {
        callInstrumentId_ = value;
      }
    }

    /// <summary>Field number for the "put_instrument_id" field.</summary>
    public const int PutInstrumentIdFieldNumber = 5;
    private ulong putInstrumentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong PutInstrumentId {
      get { return putInstrumentId_; }
      set {
        putInstrumentId_ = value;
      }
    }

    /// <summary>Field number for the "strike" field.</summary>
    public const int StrikeFieldNumber = 6;
    private double strike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Strike {
      get { return strike_; }
      set {
        strike_ = value;
      }
    }

    /// <summary>Field number for the "forward" field.</summary>
    public const int ForwardFieldNumber = 7;
    private double forward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    /// <summary>Field number for the "discount" field.</summary>
    public const int DiscountFieldNumber = 8;
    private double discount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Discount {
      get { return discount_; }
      set {
        discount_ = value;
      }
    }

    /// <summary>Field number for the "bid_price_call" field.</summary>
    public const int BidPriceCallFieldNumber = 9;
    private double bidPriceCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BidPriceCall {
      get { return bidPriceCall_; }
      set {
        bidPriceCall_ = value;
      }
    }

    /// <summary>Field number for the "bid_quantity_call" field.</summary>
    public const int BidQuantityCallFieldNumber = 10;
    private long bidQuantityCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BidQuantityCall {
      get { return bidQuantityCall_; }
      set {
        bidQuantityCall_ = value;
      }
    }

    /// <summary>Field number for the "ask_price_call" field.</summary>
    public const int AskPriceCallFieldNumber = 11;
    private double askPriceCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AskPriceCall {
      get { return askPriceCall_; }
      set {
        askPriceCall_ = value;
      }
    }

    /// <summary>Field number for the "ask_quantity_call" field.</summary>
    public const int AskQuantityCallFieldNumber = 12;
    private long askQuantityCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AskQuantityCall {
      get { return askQuantityCall_; }
      set {
        askQuantityCall_ = value;
      }
    }

    /// <summary>Field number for the "est_price_call" field.</summary>
    public const int EstPriceCallFieldNumber = 13;
    private double estPriceCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EstPriceCall {
      get { return estPriceCall_; }
      set {
        estPriceCall_ = value;
      }
    }

    /// <summary>Field number for the "bid_price_put" field.</summary>
    public const int BidPricePutFieldNumber = 14;
    private double bidPricePut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BidPricePut {
      get { return bidPricePut_; }
      set {
        bidPricePut_ = value;
      }
    }

    /// <summary>Field number for the "bid_quantity_put" field.</summary>
    public const int BidQuantityPutFieldNumber = 15;
    private long bidQuantityPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BidQuantityPut {
      get { return bidQuantityPut_; }
      set {
        bidQuantityPut_ = value;
      }
    }

    /// <summary>Field number for the "ask_price_put" field.</summary>
    public const int AskPricePutFieldNumber = 16;
    private double askPricePut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AskPricePut {
      get { return askPricePut_; }
      set {
        askPricePut_ = value;
      }
    }

    /// <summary>Field number for the "ask_quantity_put" field.</summary>
    public const int AskQuantityPutFieldNumber = 17;
    private long askQuantityPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AskQuantityPut {
      get { return askQuantityPut_; }
      set {
        askQuantityPut_ = value;
      }
    }

    /// <summary>Field number for the "est_price_put" field.</summary>
    public const int EstPricePutFieldNumber = 18;
    private double estPricePut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double EstPricePut {
      get { return estPricePut_; }
      set {
        estPricePut_ = value;
      }
    }

    /// <summary>Field number for the "expiration" field.</summary>
    public const int ExpirationFieldNumber = 19;
    private ulong expiration_;
    /// <summary>
    /// epoch_ns_t
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Expiration {
      get { return expiration_; }
      set {
        expiration_ = value;
      }
    }

    /// <summary>Field number for the "vol" field.</summary>
    public const int VolFieldNumber = 20;
    private double vol_;
    /// <summary>
    /// vol from least square fit of otm options
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Vol {
      get { return vol_; }
      set {
        vol_ = value;
      }
    }

    /// <summary>Field number for the "d0" field.</summary>
    public const int D0FieldNumber = 21;
    private double d0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double D0 {
      get { return d0_; }
      set {
        d0_ = value;
      }
    }

    /// <summary>Field number for the "tte" field.</summary>
    public const int TteFieldNumber = 22;
    private double tte_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Tte {
      get { return tte_; }
      set {
        tte_ = value;
      }
    }

    /// <summary>Field number for the "fit_norm_vol" field.</summary>
    public const int FitNormVolFieldNumber = 23;
    private double fitNormVol_;
    /// <summary>
    /// normalized vol from market fit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitNormVol {
      get { return fitNormVol_; }
      set {
        fitNormVol_ = value;
      }
    }

    /// <summary>Field number for the "fit_vol" field.</summary>
    public const int FitVolFieldNumber = 24;
    private double fitVol_;
    /// <summary>
    /// unnormalized vol from market fit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitVol {
      get { return fitVol_; }
      set {
        fitVol_ = value;
      }
    }

    /// <summary>Field number for the "fit_norm_vol_dlogstrike" field.</summary>
    public const int FitNormVolDlogstrikeFieldNumber = 25;
    private double fitNormVolDlogstrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitNormVolDlogstrike {
      get { return fitNormVolDlogstrike_; }
      set {
        fitNormVolDlogstrike_ = value;
      }
    }

    /// <summary>Field number for the "fit_norm_vol_dlogstrike2" field.</summary>
    public const int FitNormVolDlogstrike2FieldNumber = 26;
    private double fitNormVolDlogstrike2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitNormVolDlogstrike2 {
      get { return fitNormVolDlogstrike2_; }
      set {
        fitNormVolDlogstrike2_ = value;
      }
    }

    /// <summary>Field number for the "fit_price_call" field.</summary>
    public const int FitPriceCallFieldNumber = 27;
    private double fitPriceCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitPriceCall {
      get { return fitPriceCall_; }
      set {
        fitPriceCall_ = value;
      }
    }

    /// <summary>Field number for the "fit_price_put" field.</summary>
    public const int FitPricePutFieldNumber = 28;
    private double fitPricePut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitPricePut {
      get { return fitPricePut_; }
      set {
        fitPricePut_ = value;
      }
    }

    /// <summary>Field number for the "fit_delta_call" field.</summary>
    public const int FitDeltaCallFieldNumber = 29;
    private double fitDeltaCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitDeltaCall {
      get { return fitDeltaCall_; }
      set {
        fitDeltaCall_ = value;
      }
    }

    /// <summary>Field number for the "fit_delta_put" field.</summary>
    public const int FitDeltaPutFieldNumber = 30;
    private double fitDeltaPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitDeltaPut {
      get { return fitDeltaPut_; }
      set {
        fitDeltaPut_ = value;
      }
    }

    /// <summary>Field number for the "fit_vega_call" field.</summary>
    public const int FitVegaCallFieldNumber = 31;
    private double fitVegaCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitVegaCall {
      get { return fitVegaCall_; }
      set {
        fitVegaCall_ = value;
      }
    }

    /// <summary>Field number for the "fit_vega_put" field.</summary>
    public const int FitVegaPutFieldNumber = 32;
    private double fitVegaPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitVegaPut {
      get { return fitVegaPut_; }
      set {
        fitVegaPut_ = value;
      }
    }

    /// <summary>Field number for the "fit_gamma_call" field.</summary>
    public const int FitGammaCallFieldNumber = 33;
    private double fitGammaCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitGammaCall {
      get { return fitGammaCall_; }
      set {
        fitGammaCall_ = value;
      }
    }

    /// <summary>Field number for the "fit_gamma_put" field.</summary>
    public const int FitGammaPutFieldNumber = 34;
    private double fitGammaPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitGammaPut {
      get { return fitGammaPut_; }
      set {
        fitGammaPut_ = value;
      }
    }

    /// <summary>Field number for the "fit_charm_call" field.</summary>
    public const int FitCharmCallFieldNumber = 35;
    private double fitCharmCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitCharmCall {
      get { return fitCharmCall_; }
      set {
        fitCharmCall_ = value;
      }
    }

    /// <summary>Field number for the "fit_charm_put" field.</summary>
    public const int FitCharmPutFieldNumber = 36;
    private double fitCharmPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitCharmPut {
      get { return fitCharmPut_; }
      set {
        fitCharmPut_ = value;
      }
    }

    /// <summary>Field number for the "fit_vanna_call" field.</summary>
    public const int FitVannaCallFieldNumber = 37;
    private double fitVannaCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitVannaCall {
      get { return fitVannaCall_; }
      set {
        fitVannaCall_ = value;
      }
    }

    /// <summary>Field number for the "fit_vanna_put" field.</summary>
    public const int FitVannaPutFieldNumber = 38;
    private double fitVannaPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitVannaPut {
      get { return fitVannaPut_; }
      set {
        fitVannaPut_ = value;
      }
    }

    /// <summary>Field number for the "fit_skew_delta_call" field.</summary>
    public const int FitSkewDeltaCallFieldNumber = 39;
    private double fitSkewDeltaCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitSkewDeltaCall {
      get { return fitSkewDeltaCall_; }
      set {
        fitSkewDeltaCall_ = value;
      }
    }

    /// <summary>Field number for the "fit_skew_delta_put" field.</summary>
    public const int FitSkewDeltaPutFieldNumber = 40;
    private double fitSkewDeltaPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitSkewDeltaPut {
      get { return fitSkewDeltaPut_; }
      set {
        fitSkewDeltaPut_ = value;
      }
    }

    /// <summary>Field number for the "fit_skew_gamma_call" field.</summary>
    public const int FitSkewGammaCallFieldNumber = 41;
    private double fitSkewGammaCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitSkewGammaCall {
      get { return fitSkewGammaCall_; }
      set {
        fitSkewGammaCall_ = value;
      }
    }

    /// <summary>Field number for the "fit_skew_gamma_put" field.</summary>
    public const int FitSkewGammaPutFieldNumber = 42;
    private double fitSkewGammaPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitSkewGammaPut {
      get { return fitSkewGammaPut_; }
      set {
        fitSkewGammaPut_ = value;
      }
    }

    /// <summary>Field number for the "fit_theta_call" field.</summary>
    public const int FitThetaCallFieldNumber = 43;
    private double fitThetaCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitThetaCall {
      get { return fitThetaCall_; }
      set {
        fitThetaCall_ = value;
      }
    }

    /// <summary>Field number for the "fit_theta_put" field.</summary>
    public const int FitThetaPutFieldNumber = 44;
    private double fitThetaPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitThetaPut {
      get { return fitThetaPut_; }
      set {
        fitThetaPut_ = value;
      }
    }

    /// <summary>Field number for the "fit_vol_theta_call" field.</summary>
    public const int FitVolThetaCallFieldNumber = 45;
    private double fitVolThetaCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitVolThetaCall {
      get { return fitVolThetaCall_; }
      set {
        fitVolThetaCall_ = value;
      }
    }

    /// <summary>Field number for the "fit_vol_theta_put" field.</summary>
    public const int FitVolThetaPutFieldNumber = 46;
    private double fitVolThetaPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FitVolThetaPut {
      get { return fitVolThetaPut_; }
      set {
        fitVolThetaPut_ = value;
      }
    }

    /// <summary>Field number for the "probability_itm_call" field.</summary>
    public const int ProbabilityItmCallFieldNumber = 47;
    private double probabilityItmCall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ProbabilityItmCall {
      get { return probabilityItmCall_; }
      set {
        probabilityItmCall_ = value;
      }
    }

    /// <summary>Field number for the "probability_itm_put" field.</summary>
    public const int ProbabilityItmPutFieldNumber = 48;
    private double probabilityItmPut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ProbabilityItmPut {
      get { return probabilityItmPut_; }
      set {
        probabilityItmPut_ = value;
      }
    }

    /// <summary>Field number for the "implied_pdf" field.</summary>
    public const int ImpliedPdfFieldNumber = 49;
    private double impliedPdf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ImpliedPdf {
      get { return impliedPdf_; }
      set {
        impliedPdf_ = value;
      }
    }

    /// <summary>Field number for the "vcr_base" field.</summary>
    public const int VcrBaseFieldNumber = 50;
    private double vcrBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VcrBase {
      get { return vcrBase_; }
      set {
        vcrBase_ = value;
      }
    }

    /// <summary>Field number for the "vcr_slope_multiplier" field.</summary>
    public const int VcrSlopeMultiplierFieldNumber = 51;
    private double vcrSlopeMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VcrSlopeMultiplier {
      get { return vcrSlopeMultiplier_; }
      set {
        vcrSlopeMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "vcr_total" field.</summary>
    public const int VcrTotalFieldNumber = 52;
    private double vcrTotal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VcrTotal {
      get { return vcrTotal_; }
      set {
        vcrTotal_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol" field.</summary>
    public const int AtmVolFieldNumber = 53;
    private double atmVol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AtmVol {
      get { return atmVol_; }
      set {
        atmVol_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol_dlogstrike" field.</summary>
    public const int AtmVolDlogstrikeFieldNumber = 54;
    private double atmVolDlogstrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AtmVolDlogstrike {
      get { return atmVolDlogstrike_; }
      set {
        atmVolDlogstrike_ = value;
      }
    }

    /// <summary>Field number for the "vol_dlogstrike" field.</summary>
    public const int VolDlogstrikeFieldNumber = 55;
    private double volDlogstrike_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VolDlogstrike {
      get { return volDlogstrike_; }
      set {
        volDlogstrike_ = value;
      }
    }

    /// <summary>Field number for the "vol_dlogstrike2" field.</summary>
    public const int VolDlogstrike2FieldNumber = 56;
    private double volDlogstrike2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VolDlogstrike2 {
      get { return volDlogstrike2_; }
      set {
        volDlogstrike2_ = value;
      }
    }

    /// <summary>Field number for the "vol_dlogforward" field.</summary>
    public const int VolDlogforwardFieldNumber = 57;
    private double volDlogforward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VolDlogforward {
      get { return volDlogforward_; }
      set {
        volDlogforward_ = value;
      }
    }

    /// <summary>Field number for the "vol_dlogforward2" field.</summary>
    public const int VolDlogforward2FieldNumber = 58;
    private double volDlogforward2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double VolDlogforward2 {
      get { return volDlogforward2_; }
      set {
        volDlogforward2_ = value;
      }
    }

    /// <summary>Field number for the "logmoneyness" field.</summary>
    public const int LogmoneynessFieldNumber = 59;
    private double logmoneyness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Logmoneyness {
      get { return logmoneyness_; }
      set {
        logmoneyness_ = value;
      }
    }

    /// <summary>Field number for the "underlying" field.</summary>
    public const int UnderlyingFieldNumber = 60;
    private string underlying_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Underlying {
      get { return underlying_; }
      set {
        underlying_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OptionTheo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OptionTheo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeqNum != other.SeqNum) return false;
      if (SendTime != other.SendTime) return false;
      if (FrameworkTime != other.FrameworkTime) return false;
      if (CallInstrumentId != other.CallInstrumentId) return false;
      if (PutInstrumentId != other.PutInstrumentId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Strike, other.Strike)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Forward, other.Forward)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Discount, other.Discount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidPriceCall, other.BidPriceCall)) return false;
      if (BidQuantityCall != other.BidQuantityCall) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskPriceCall, other.AskPriceCall)) return false;
      if (AskQuantityCall != other.AskQuantityCall) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EstPriceCall, other.EstPriceCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BidPricePut, other.BidPricePut)) return false;
      if (BidQuantityPut != other.BidQuantityPut) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AskPricePut, other.AskPricePut)) return false;
      if (AskQuantityPut != other.AskQuantityPut) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EstPricePut, other.EstPricePut)) return false;
      if (Expiration != other.Expiration) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Vol, other.Vol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(D0, other.D0)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Tte, other.Tte)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitNormVol, other.FitNormVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitVol, other.FitVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitNormVolDlogstrike, other.FitNormVolDlogstrike)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitNormVolDlogstrike2, other.FitNormVolDlogstrike2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitPriceCall, other.FitPriceCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitPricePut, other.FitPricePut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitDeltaCall, other.FitDeltaCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitDeltaPut, other.FitDeltaPut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitVegaCall, other.FitVegaCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitVegaPut, other.FitVegaPut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitGammaCall, other.FitGammaCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitGammaPut, other.FitGammaPut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitCharmCall, other.FitCharmCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitCharmPut, other.FitCharmPut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitVannaCall, other.FitVannaCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitVannaPut, other.FitVannaPut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitSkewDeltaCall, other.FitSkewDeltaCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitSkewDeltaPut, other.FitSkewDeltaPut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitSkewGammaCall, other.FitSkewGammaCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitSkewGammaPut, other.FitSkewGammaPut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitThetaCall, other.FitThetaCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitThetaPut, other.FitThetaPut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitVolThetaCall, other.FitVolThetaCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FitVolThetaPut, other.FitVolThetaPut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ProbabilityItmCall, other.ProbabilityItmCall)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ProbabilityItmPut, other.ProbabilityItmPut)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ImpliedPdf, other.ImpliedPdf)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VcrBase, other.VcrBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VcrSlopeMultiplier, other.VcrSlopeMultiplier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VcrTotal, other.VcrTotal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AtmVol, other.AtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AtmVolDlogstrike, other.AtmVolDlogstrike)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VolDlogstrike, other.VolDlogstrike)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VolDlogstrike2, other.VolDlogstrike2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VolDlogforward, other.VolDlogforward)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(VolDlogforward2, other.VolDlogforward2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Logmoneyness, other.Logmoneyness)) return false;
      if (Underlying != other.Underlying) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SeqNum != 0) hash ^= SeqNum.GetHashCode();
      if (SendTime != 0UL) hash ^= SendTime.GetHashCode();
      if (FrameworkTime != 0UL) hash ^= FrameworkTime.GetHashCode();
      if (CallInstrumentId != 0UL) hash ^= CallInstrumentId.GetHashCode();
      if (PutInstrumentId != 0UL) hash ^= PutInstrumentId.GetHashCode();
      if (Strike != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Strike);
      if (Forward != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Forward);
      if (Discount != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Discount);
      if (BidPriceCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidPriceCall);
      if (BidQuantityCall != 0L) hash ^= BidQuantityCall.GetHashCode();
      if (AskPriceCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskPriceCall);
      if (AskQuantityCall != 0L) hash ^= AskQuantityCall.GetHashCode();
      if (EstPriceCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EstPriceCall);
      if (BidPricePut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BidPricePut);
      if (BidQuantityPut != 0L) hash ^= BidQuantityPut.GetHashCode();
      if (AskPricePut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AskPricePut);
      if (AskQuantityPut != 0L) hash ^= AskQuantityPut.GetHashCode();
      if (EstPricePut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EstPricePut);
      if (Expiration != 0UL) hash ^= Expiration.GetHashCode();
      if (Vol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Vol);
      if (D0 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(D0);
      if (Tte != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Tte);
      if (FitNormVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitNormVol);
      if (FitVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitVol);
      if (FitNormVolDlogstrike != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitNormVolDlogstrike);
      if (FitNormVolDlogstrike2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitNormVolDlogstrike2);
      if (FitPriceCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitPriceCall);
      if (FitPricePut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitPricePut);
      if (FitDeltaCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitDeltaCall);
      if (FitDeltaPut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitDeltaPut);
      if (FitVegaCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitVegaCall);
      if (FitVegaPut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitVegaPut);
      if (FitGammaCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitGammaCall);
      if (FitGammaPut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitGammaPut);
      if (FitCharmCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitCharmCall);
      if (FitCharmPut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitCharmPut);
      if (FitVannaCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitVannaCall);
      if (FitVannaPut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitVannaPut);
      if (FitSkewDeltaCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitSkewDeltaCall);
      if (FitSkewDeltaPut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitSkewDeltaPut);
      if (FitSkewGammaCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitSkewGammaCall);
      if (FitSkewGammaPut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitSkewGammaPut);
      if (FitThetaCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitThetaCall);
      if (FitThetaPut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitThetaPut);
      if (FitVolThetaCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitVolThetaCall);
      if (FitVolThetaPut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FitVolThetaPut);
      if (ProbabilityItmCall != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ProbabilityItmCall);
      if (ProbabilityItmPut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ProbabilityItmPut);
      if (ImpliedPdf != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ImpliedPdf);
      if (VcrBase != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VcrBase);
      if (VcrSlopeMultiplier != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VcrSlopeMultiplier);
      if (VcrTotal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VcrTotal);
      if (AtmVol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AtmVol);
      if (AtmVolDlogstrike != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AtmVolDlogstrike);
      if (VolDlogstrike != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VolDlogstrike);
      if (VolDlogstrike2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VolDlogstrike2);
      if (VolDlogforward != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VolDlogforward);
      if (VolDlogforward2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(VolDlogforward2);
      if (Logmoneyness != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Logmoneyness);
      if (Underlying.Length != 0) hash ^= Underlying.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SeqNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SeqNum);
      }
      if (SendTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SendTime);
      }
      if (FrameworkTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FrameworkTime);
      }
      if (CallInstrumentId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CallInstrumentId);
      }
      if (PutInstrumentId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(PutInstrumentId);
      }
      if (Strike != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Strike);
      }
      if (Forward != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Forward);
      }
      if (Discount != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Discount);
      }
      if (BidPriceCall != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(BidPriceCall);
      }
      if (BidQuantityCall != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(BidQuantityCall);
      }
      if (AskPriceCall != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AskPriceCall);
      }
      if (AskQuantityCall != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AskQuantityCall);
      }
      if (EstPriceCall != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(EstPriceCall);
      }
      if (BidPricePut != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(BidPricePut);
      }
      if (BidQuantityPut != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(BidQuantityPut);
      }
      if (AskPricePut != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(AskPricePut);
      }
      if (AskQuantityPut != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(AskQuantityPut);
      }
      if (EstPricePut != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(EstPricePut);
      }
      if (Expiration != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(Expiration);
      }
      if (Vol != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Vol);
      }
      if (D0 != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(D0);
      }
      if (Tte != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Tte);
      }
      if (FitNormVol != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(FitNormVol);
      }
      if (FitVol != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(FitVol);
      }
      if (FitNormVolDlogstrike != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(FitNormVolDlogstrike);
      }
      if (FitNormVolDlogstrike2 != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(FitNormVolDlogstrike2);
      }
      if (FitPriceCall != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(FitPriceCall);
      }
      if (FitPricePut != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(FitPricePut);
      }
      if (FitDeltaCall != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(FitDeltaCall);
      }
      if (FitDeltaPut != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(FitDeltaPut);
      }
      if (FitVegaCall != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(FitVegaCall);
      }
      if (FitVegaPut != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(FitVegaPut);
      }
      if (FitGammaCall != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(FitGammaCall);
      }
      if (FitGammaPut != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(FitGammaPut);
      }
      if (FitCharmCall != 0D) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(FitCharmCall);
      }
      if (FitCharmPut != 0D) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(FitCharmPut);
      }
      if (FitVannaCall != 0D) {
        output.WriteRawTag(169, 2);
        output.WriteDouble(FitVannaCall);
      }
      if (FitVannaPut != 0D) {
        output.WriteRawTag(177, 2);
        output.WriteDouble(FitVannaPut);
      }
      if (FitSkewDeltaCall != 0D) {
        output.WriteRawTag(185, 2);
        output.WriteDouble(FitSkewDeltaCall);
      }
      if (FitSkewDeltaPut != 0D) {
        output.WriteRawTag(193, 2);
        output.WriteDouble(FitSkewDeltaPut);
      }
      if (FitSkewGammaCall != 0D) {
        output.WriteRawTag(201, 2);
        output.WriteDouble(FitSkewGammaCall);
      }
      if (FitSkewGammaPut != 0D) {
        output.WriteRawTag(209, 2);
        output.WriteDouble(FitSkewGammaPut);
      }
      if (FitThetaCall != 0D) {
        output.WriteRawTag(217, 2);
        output.WriteDouble(FitThetaCall);
      }
      if (FitThetaPut != 0D) {
        output.WriteRawTag(225, 2);
        output.WriteDouble(FitThetaPut);
      }
      if (FitVolThetaCall != 0D) {
        output.WriteRawTag(233, 2);
        output.WriteDouble(FitVolThetaCall);
      }
      if (FitVolThetaPut != 0D) {
        output.WriteRawTag(241, 2);
        output.WriteDouble(FitVolThetaPut);
      }
      if (ProbabilityItmCall != 0D) {
        output.WriteRawTag(249, 2);
        output.WriteDouble(ProbabilityItmCall);
      }
      if (ProbabilityItmPut != 0D) {
        output.WriteRawTag(129, 3);
        output.WriteDouble(ProbabilityItmPut);
      }
      if (ImpliedPdf != 0D) {
        output.WriteRawTag(137, 3);
        output.WriteDouble(ImpliedPdf);
      }
      if (VcrBase != 0D) {
        output.WriteRawTag(145, 3);
        output.WriteDouble(VcrBase);
      }
      if (VcrSlopeMultiplier != 0D) {
        output.WriteRawTag(153, 3);
        output.WriteDouble(VcrSlopeMultiplier);
      }
      if (VcrTotal != 0D) {
        output.WriteRawTag(161, 3);
        output.WriteDouble(VcrTotal);
      }
      if (AtmVol != 0D) {
        output.WriteRawTag(169, 3);
        output.WriteDouble(AtmVol);
      }
      if (AtmVolDlogstrike != 0D) {
        output.WriteRawTag(177, 3);
        output.WriteDouble(AtmVolDlogstrike);
      }
      if (VolDlogstrike != 0D) {
        output.WriteRawTag(185, 3);
        output.WriteDouble(VolDlogstrike);
      }
      if (VolDlogstrike2 != 0D) {
        output.WriteRawTag(193, 3);
        output.WriteDouble(VolDlogstrike2);
      }
      if (VolDlogforward != 0D) {
        output.WriteRawTag(201, 3);
        output.WriteDouble(VolDlogforward);
      }
      if (VolDlogforward2 != 0D) {
        output.WriteRawTag(209, 3);
        output.WriteDouble(VolDlogforward2);
      }
      if (Logmoneyness != 0D) {
        output.WriteRawTag(217, 3);
        output.WriteDouble(Logmoneyness);
      }
      if (Underlying.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(Underlying);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SeqNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SeqNum);
      }
      if (SendTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SendTime);
      }
      if (FrameworkTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FrameworkTime);
      }
      if (CallInstrumentId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CallInstrumentId);
      }
      if (PutInstrumentId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(PutInstrumentId);
      }
      if (Strike != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Strike);
      }
      if (Forward != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Forward);
      }
      if (Discount != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Discount);
      }
      if (BidPriceCall != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(BidPriceCall);
      }
      if (BidQuantityCall != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(BidQuantityCall);
      }
      if (AskPriceCall != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(AskPriceCall);
      }
      if (AskQuantityCall != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AskQuantityCall);
      }
      if (EstPriceCall != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(EstPriceCall);
      }
      if (BidPricePut != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(BidPricePut);
      }
      if (BidQuantityPut != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(BidQuantityPut);
      }
      if (AskPricePut != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(AskPricePut);
      }
      if (AskQuantityPut != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(AskQuantityPut);
      }
      if (EstPricePut != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(EstPricePut);
      }
      if (Expiration != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(Expiration);
      }
      if (Vol != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(Vol);
      }
      if (D0 != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(D0);
      }
      if (Tte != 0D) {
        output.WriteRawTag(177, 1);
        output.WriteDouble(Tte);
      }
      if (FitNormVol != 0D) {
        output.WriteRawTag(185, 1);
        output.WriteDouble(FitNormVol);
      }
      if (FitVol != 0D) {
        output.WriteRawTag(193, 1);
        output.WriteDouble(FitVol);
      }
      if (FitNormVolDlogstrike != 0D) {
        output.WriteRawTag(201, 1);
        output.WriteDouble(FitNormVolDlogstrike);
      }
      if (FitNormVolDlogstrike2 != 0D) {
        output.WriteRawTag(209, 1);
        output.WriteDouble(FitNormVolDlogstrike2);
      }
      if (FitPriceCall != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(FitPriceCall);
      }
      if (FitPricePut != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(FitPricePut);
      }
      if (FitDeltaCall != 0D) {
        output.WriteRawTag(233, 1);
        output.WriteDouble(FitDeltaCall);
      }
      if (FitDeltaPut != 0D) {
        output.WriteRawTag(241, 1);
        output.WriteDouble(FitDeltaPut);
      }
      if (FitVegaCall != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(FitVegaCall);
      }
      if (FitVegaPut != 0D) {
        output.WriteRawTag(129, 2);
        output.WriteDouble(FitVegaPut);
      }
      if (FitGammaCall != 0D) {
        output.WriteRawTag(137, 2);
        output.WriteDouble(FitGammaCall);
      }
      if (FitGammaPut != 0D) {
        output.WriteRawTag(145, 2);
        output.WriteDouble(FitGammaPut);
      }
      if (FitCharmCall != 0D) {
        output.WriteRawTag(153, 2);
        output.WriteDouble(FitCharmCall);
      }
      if (FitCharmPut != 0D) {
        output.WriteRawTag(161, 2);
        output.WriteDouble(FitCharmPut);
      }
      if (FitVannaCall != 0D) {
        output.WriteRawTag(169, 2);
        output.WriteDouble(FitVannaCall);
      }
      if (FitVannaPut != 0D) {
        output.WriteRawTag(177, 2);
        output.WriteDouble(FitVannaPut);
      }
      if (FitSkewDeltaCall != 0D) {
        output.WriteRawTag(185, 2);
        output.WriteDouble(FitSkewDeltaCall);
      }
      if (FitSkewDeltaPut != 0D) {
        output.WriteRawTag(193, 2);
        output.WriteDouble(FitSkewDeltaPut);
      }
      if (FitSkewGammaCall != 0D) {
        output.WriteRawTag(201, 2);
        output.WriteDouble(FitSkewGammaCall);
      }
      if (FitSkewGammaPut != 0D) {
        output.WriteRawTag(209, 2);
        output.WriteDouble(FitSkewGammaPut);
      }
      if (FitThetaCall != 0D) {
        output.WriteRawTag(217, 2);
        output.WriteDouble(FitThetaCall);
      }
      if (FitThetaPut != 0D) {
        output.WriteRawTag(225, 2);
        output.WriteDouble(FitThetaPut);
      }
      if (FitVolThetaCall != 0D) {
        output.WriteRawTag(233, 2);
        output.WriteDouble(FitVolThetaCall);
      }
      if (FitVolThetaPut != 0D) {
        output.WriteRawTag(241, 2);
        output.WriteDouble(FitVolThetaPut);
      }
      if (ProbabilityItmCall != 0D) {
        output.WriteRawTag(249, 2);
        output.WriteDouble(ProbabilityItmCall);
      }
      if (ProbabilityItmPut != 0D) {
        output.WriteRawTag(129, 3);
        output.WriteDouble(ProbabilityItmPut);
      }
      if (ImpliedPdf != 0D) {
        output.WriteRawTag(137, 3);
        output.WriteDouble(ImpliedPdf);
      }
      if (VcrBase != 0D) {
        output.WriteRawTag(145, 3);
        output.WriteDouble(VcrBase);
      }
      if (VcrSlopeMultiplier != 0D) {
        output.WriteRawTag(153, 3);
        output.WriteDouble(VcrSlopeMultiplier);
      }
      if (VcrTotal != 0D) {
        output.WriteRawTag(161, 3);
        output.WriteDouble(VcrTotal);
      }
      if (AtmVol != 0D) {
        output.WriteRawTag(169, 3);
        output.WriteDouble(AtmVol);
      }
      if (AtmVolDlogstrike != 0D) {
        output.WriteRawTag(177, 3);
        output.WriteDouble(AtmVolDlogstrike);
      }
      if (VolDlogstrike != 0D) {
        output.WriteRawTag(185, 3);
        output.WriteDouble(VolDlogstrike);
      }
      if (VolDlogstrike2 != 0D) {
        output.WriteRawTag(193, 3);
        output.WriteDouble(VolDlogstrike2);
      }
      if (VolDlogforward != 0D) {
        output.WriteRawTag(201, 3);
        output.WriteDouble(VolDlogforward);
      }
      if (VolDlogforward2 != 0D) {
        output.WriteRawTag(209, 3);
        output.WriteDouble(VolDlogforward2);
      }
      if (Logmoneyness != 0D) {
        output.WriteRawTag(217, 3);
        output.WriteDouble(Logmoneyness);
      }
      if (Underlying.Length != 0) {
        output.WriteRawTag(226, 3);
        output.WriteString(Underlying);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SeqNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeqNum);
      }
      if (SendTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SendTime);
      }
      if (FrameworkTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FrameworkTime);
      }
      if (CallInstrumentId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CallInstrumentId);
      }
      if (PutInstrumentId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PutInstrumentId);
      }
      if (Strike != 0D) {
        size += 1 + 8;
      }
      if (Forward != 0D) {
        size += 1 + 8;
      }
      if (Discount != 0D) {
        size += 1 + 8;
      }
      if (BidPriceCall != 0D) {
        size += 1 + 8;
      }
      if (BidQuantityCall != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BidQuantityCall);
      }
      if (AskPriceCall != 0D) {
        size += 1 + 8;
      }
      if (AskQuantityCall != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AskQuantityCall);
      }
      if (EstPriceCall != 0D) {
        size += 1 + 8;
      }
      if (BidPricePut != 0D) {
        size += 1 + 8;
      }
      if (BidQuantityPut != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BidQuantityPut);
      }
      if (AskPricePut != 0D) {
        size += 2 + 8;
      }
      if (AskQuantityPut != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AskQuantityPut);
      }
      if (EstPricePut != 0D) {
        size += 2 + 8;
      }
      if (Expiration != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Expiration);
      }
      if (Vol != 0D) {
        size += 2 + 8;
      }
      if (D0 != 0D) {
        size += 2 + 8;
      }
      if (Tte != 0D) {
        size += 2 + 8;
      }
      if (FitNormVol != 0D) {
        size += 2 + 8;
      }
      if (FitVol != 0D) {
        size += 2 + 8;
      }
      if (FitNormVolDlogstrike != 0D) {
        size += 2 + 8;
      }
      if (FitNormVolDlogstrike2 != 0D) {
        size += 2 + 8;
      }
      if (FitPriceCall != 0D) {
        size += 2 + 8;
      }
      if (FitPricePut != 0D) {
        size += 2 + 8;
      }
      if (FitDeltaCall != 0D) {
        size += 2 + 8;
      }
      if (FitDeltaPut != 0D) {
        size += 2 + 8;
      }
      if (FitVegaCall != 0D) {
        size += 2 + 8;
      }
      if (FitVegaPut != 0D) {
        size += 2 + 8;
      }
      if (FitGammaCall != 0D) {
        size += 2 + 8;
      }
      if (FitGammaPut != 0D) {
        size += 2 + 8;
      }
      if (FitCharmCall != 0D) {
        size += 2 + 8;
      }
      if (FitCharmPut != 0D) {
        size += 2 + 8;
      }
      if (FitVannaCall != 0D) {
        size += 2 + 8;
      }
      if (FitVannaPut != 0D) {
        size += 2 + 8;
      }
      if (FitSkewDeltaCall != 0D) {
        size += 2 + 8;
      }
      if (FitSkewDeltaPut != 0D) {
        size += 2 + 8;
      }
      if (FitSkewGammaCall != 0D) {
        size += 2 + 8;
      }
      if (FitSkewGammaPut != 0D) {
        size += 2 + 8;
      }
      if (FitThetaCall != 0D) {
        size += 2 + 8;
      }
      if (FitThetaPut != 0D) {
        size += 2 + 8;
      }
      if (FitVolThetaCall != 0D) {
        size += 2 + 8;
      }
      if (FitVolThetaPut != 0D) {
        size += 2 + 8;
      }
      if (ProbabilityItmCall != 0D) {
        size += 2 + 8;
      }
      if (ProbabilityItmPut != 0D) {
        size += 2 + 8;
      }
      if (ImpliedPdf != 0D) {
        size += 2 + 8;
      }
      if (VcrBase != 0D) {
        size += 2 + 8;
      }
      if (VcrSlopeMultiplier != 0D) {
        size += 2 + 8;
      }
      if (VcrTotal != 0D) {
        size += 2 + 8;
      }
      if (AtmVol != 0D) {
        size += 2 + 8;
      }
      if (AtmVolDlogstrike != 0D) {
        size += 2 + 8;
      }
      if (VolDlogstrike != 0D) {
        size += 2 + 8;
      }
      if (VolDlogstrike2 != 0D) {
        size += 2 + 8;
      }
      if (VolDlogforward != 0D) {
        size += 2 + 8;
      }
      if (VolDlogforward2 != 0D) {
        size += 2 + 8;
      }
      if (Logmoneyness != 0D) {
        size += 2 + 8;
      }
      if (Underlying.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Underlying);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OptionTheo other) {
      if (other == null) {
        return;
      }
      if (other.SeqNum != 0) {
        SeqNum = other.SeqNum;
      }
      if (other.SendTime != 0UL) {
        SendTime = other.SendTime;
      }
      if (other.FrameworkTime != 0UL) {
        FrameworkTime = other.FrameworkTime;
      }
      if (other.CallInstrumentId != 0UL) {
        CallInstrumentId = other.CallInstrumentId;
      }
      if (other.PutInstrumentId != 0UL) {
        PutInstrumentId = other.PutInstrumentId;
      }
      if (other.Strike != 0D) {
        Strike = other.Strike;
      }
      if (other.Forward != 0D) {
        Forward = other.Forward;
      }
      if (other.Discount != 0D) {
        Discount = other.Discount;
      }
      if (other.BidPriceCall != 0D) {
        BidPriceCall = other.BidPriceCall;
      }
      if (other.BidQuantityCall != 0L) {
        BidQuantityCall = other.BidQuantityCall;
      }
      if (other.AskPriceCall != 0D) {
        AskPriceCall = other.AskPriceCall;
      }
      if (other.AskQuantityCall != 0L) {
        AskQuantityCall = other.AskQuantityCall;
      }
      if (other.EstPriceCall != 0D) {
        EstPriceCall = other.EstPriceCall;
      }
      if (other.BidPricePut != 0D) {
        BidPricePut = other.BidPricePut;
      }
      if (other.BidQuantityPut != 0L) {
        BidQuantityPut = other.BidQuantityPut;
      }
      if (other.AskPricePut != 0D) {
        AskPricePut = other.AskPricePut;
      }
      if (other.AskQuantityPut != 0L) {
        AskQuantityPut = other.AskQuantityPut;
      }
      if (other.EstPricePut != 0D) {
        EstPricePut = other.EstPricePut;
      }
      if (other.Expiration != 0UL) {
        Expiration = other.Expiration;
      }
      if (other.Vol != 0D) {
        Vol = other.Vol;
      }
      if (other.D0 != 0D) {
        D0 = other.D0;
      }
      if (other.Tte != 0D) {
        Tte = other.Tte;
      }
      if (other.FitNormVol != 0D) {
        FitNormVol = other.FitNormVol;
      }
      if (other.FitVol != 0D) {
        FitVol = other.FitVol;
      }
      if (other.FitNormVolDlogstrike != 0D) {
        FitNormVolDlogstrike = other.FitNormVolDlogstrike;
      }
      if (other.FitNormVolDlogstrike2 != 0D) {
        FitNormVolDlogstrike2 = other.FitNormVolDlogstrike2;
      }
      if (other.FitPriceCall != 0D) {
        FitPriceCall = other.FitPriceCall;
      }
      if (other.FitPricePut != 0D) {
        FitPricePut = other.FitPricePut;
      }
      if (other.FitDeltaCall != 0D) {
        FitDeltaCall = other.FitDeltaCall;
      }
      if (other.FitDeltaPut != 0D) {
        FitDeltaPut = other.FitDeltaPut;
      }
      if (other.FitVegaCall != 0D) {
        FitVegaCall = other.FitVegaCall;
      }
      if (other.FitVegaPut != 0D) {
        FitVegaPut = other.FitVegaPut;
      }
      if (other.FitGammaCall != 0D) {
        FitGammaCall = other.FitGammaCall;
      }
      if (other.FitGammaPut != 0D) {
        FitGammaPut = other.FitGammaPut;
      }
      if (other.FitCharmCall != 0D) {
        FitCharmCall = other.FitCharmCall;
      }
      if (other.FitCharmPut != 0D) {
        FitCharmPut = other.FitCharmPut;
      }
      if (other.FitVannaCall != 0D) {
        FitVannaCall = other.FitVannaCall;
      }
      if (other.FitVannaPut != 0D) {
        FitVannaPut = other.FitVannaPut;
      }
      if (other.FitSkewDeltaCall != 0D) {
        FitSkewDeltaCall = other.FitSkewDeltaCall;
      }
      if (other.FitSkewDeltaPut != 0D) {
        FitSkewDeltaPut = other.FitSkewDeltaPut;
      }
      if (other.FitSkewGammaCall != 0D) {
        FitSkewGammaCall = other.FitSkewGammaCall;
      }
      if (other.FitSkewGammaPut != 0D) {
        FitSkewGammaPut = other.FitSkewGammaPut;
      }
      if (other.FitThetaCall != 0D) {
        FitThetaCall = other.FitThetaCall;
      }
      if (other.FitThetaPut != 0D) {
        FitThetaPut = other.FitThetaPut;
      }
      if (other.FitVolThetaCall != 0D) {
        FitVolThetaCall = other.FitVolThetaCall;
      }
      if (other.FitVolThetaPut != 0D) {
        FitVolThetaPut = other.FitVolThetaPut;
      }
      if (other.ProbabilityItmCall != 0D) {
        ProbabilityItmCall = other.ProbabilityItmCall;
      }
      if (other.ProbabilityItmPut != 0D) {
        ProbabilityItmPut = other.ProbabilityItmPut;
      }
      if (other.ImpliedPdf != 0D) {
        ImpliedPdf = other.ImpliedPdf;
      }
      if (other.VcrBase != 0D) {
        VcrBase = other.VcrBase;
      }
      if (other.VcrSlopeMultiplier != 0D) {
        VcrSlopeMultiplier = other.VcrSlopeMultiplier;
      }
      if (other.VcrTotal != 0D) {
        VcrTotal = other.VcrTotal;
      }
      if (other.AtmVol != 0D) {
        AtmVol = other.AtmVol;
      }
      if (other.AtmVolDlogstrike != 0D) {
        AtmVolDlogstrike = other.AtmVolDlogstrike;
      }
      if (other.VolDlogstrike != 0D) {
        VolDlogstrike = other.VolDlogstrike;
      }
      if (other.VolDlogstrike2 != 0D) {
        VolDlogstrike2 = other.VolDlogstrike2;
      }
      if (other.VolDlogforward != 0D) {
        VolDlogforward = other.VolDlogforward;
      }
      if (other.VolDlogforward2 != 0D) {
        VolDlogforward2 = other.VolDlogforward2;
      }
      if (other.Logmoneyness != 0D) {
        Logmoneyness = other.Logmoneyness;
      }
      if (other.Underlying.Length != 0) {
        Underlying = other.Underlying;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SeqNum = input.ReadUInt32();
            break;
          }
          case 16: {
            SendTime = input.ReadUInt64();
            break;
          }
          case 24: {
            FrameworkTime = input.ReadUInt64();
            break;
          }
          case 32: {
            CallInstrumentId = input.ReadUInt64();
            break;
          }
          case 40: {
            PutInstrumentId = input.ReadUInt64();
            break;
          }
          case 49: {
            Strike = input.ReadDouble();
            break;
          }
          case 57: {
            Forward = input.ReadDouble();
            break;
          }
          case 65: {
            Discount = input.ReadDouble();
            break;
          }
          case 73: {
            BidPriceCall = input.ReadDouble();
            break;
          }
          case 80: {
            BidQuantityCall = input.ReadInt64();
            break;
          }
          case 89: {
            AskPriceCall = input.ReadDouble();
            break;
          }
          case 96: {
            AskQuantityCall = input.ReadInt64();
            break;
          }
          case 105: {
            EstPriceCall = input.ReadDouble();
            break;
          }
          case 113: {
            BidPricePut = input.ReadDouble();
            break;
          }
          case 120: {
            BidQuantityPut = input.ReadInt64();
            break;
          }
          case 129: {
            AskPricePut = input.ReadDouble();
            break;
          }
          case 136: {
            AskQuantityPut = input.ReadInt64();
            break;
          }
          case 145: {
            EstPricePut = input.ReadDouble();
            break;
          }
          case 152: {
            Expiration = input.ReadUInt64();
            break;
          }
          case 161: {
            Vol = input.ReadDouble();
            break;
          }
          case 169: {
            D0 = input.ReadDouble();
            break;
          }
          case 177: {
            Tte = input.ReadDouble();
            break;
          }
          case 185: {
            FitNormVol = input.ReadDouble();
            break;
          }
          case 193: {
            FitVol = input.ReadDouble();
            break;
          }
          case 201: {
            FitNormVolDlogstrike = input.ReadDouble();
            break;
          }
          case 209: {
            FitNormVolDlogstrike2 = input.ReadDouble();
            break;
          }
          case 217: {
            FitPriceCall = input.ReadDouble();
            break;
          }
          case 225: {
            FitPricePut = input.ReadDouble();
            break;
          }
          case 233: {
            FitDeltaCall = input.ReadDouble();
            break;
          }
          case 241: {
            FitDeltaPut = input.ReadDouble();
            break;
          }
          case 249: {
            FitVegaCall = input.ReadDouble();
            break;
          }
          case 257: {
            FitVegaPut = input.ReadDouble();
            break;
          }
          case 265: {
            FitGammaCall = input.ReadDouble();
            break;
          }
          case 273: {
            FitGammaPut = input.ReadDouble();
            break;
          }
          case 281: {
            FitCharmCall = input.ReadDouble();
            break;
          }
          case 289: {
            FitCharmPut = input.ReadDouble();
            break;
          }
          case 297: {
            FitVannaCall = input.ReadDouble();
            break;
          }
          case 305: {
            FitVannaPut = input.ReadDouble();
            break;
          }
          case 313: {
            FitSkewDeltaCall = input.ReadDouble();
            break;
          }
          case 321: {
            FitSkewDeltaPut = input.ReadDouble();
            break;
          }
          case 329: {
            FitSkewGammaCall = input.ReadDouble();
            break;
          }
          case 337: {
            FitSkewGammaPut = input.ReadDouble();
            break;
          }
          case 345: {
            FitThetaCall = input.ReadDouble();
            break;
          }
          case 353: {
            FitThetaPut = input.ReadDouble();
            break;
          }
          case 361: {
            FitVolThetaCall = input.ReadDouble();
            break;
          }
          case 369: {
            FitVolThetaPut = input.ReadDouble();
            break;
          }
          case 377: {
            ProbabilityItmCall = input.ReadDouble();
            break;
          }
          case 385: {
            ProbabilityItmPut = input.ReadDouble();
            break;
          }
          case 393: {
            ImpliedPdf = input.ReadDouble();
            break;
          }
          case 401: {
            VcrBase = input.ReadDouble();
            break;
          }
          case 409: {
            VcrSlopeMultiplier = input.ReadDouble();
            break;
          }
          case 417: {
            VcrTotal = input.ReadDouble();
            break;
          }
          case 425: {
            AtmVol = input.ReadDouble();
            break;
          }
          case 433: {
            AtmVolDlogstrike = input.ReadDouble();
            break;
          }
          case 441: {
            VolDlogstrike = input.ReadDouble();
            break;
          }
          case 449: {
            VolDlogstrike2 = input.ReadDouble();
            break;
          }
          case 457: {
            VolDlogforward = input.ReadDouble();
            break;
          }
          case 465: {
            VolDlogforward2 = input.ReadDouble();
            break;
          }
          case 473: {
            Logmoneyness = input.ReadDouble();
            break;
          }
          case 482: {
            Underlying = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SeqNum = input.ReadUInt32();
            break;
          }
          case 16: {
            SendTime = input.ReadUInt64();
            break;
          }
          case 24: {
            FrameworkTime = input.ReadUInt64();
            break;
          }
          case 32: {
            CallInstrumentId = input.ReadUInt64();
            break;
          }
          case 40: {
            PutInstrumentId = input.ReadUInt64();
            break;
          }
          case 49: {
            Strike = input.ReadDouble();
            break;
          }
          case 57: {
            Forward = input.ReadDouble();
            break;
          }
          case 65: {
            Discount = input.ReadDouble();
            break;
          }
          case 73: {
            BidPriceCall = input.ReadDouble();
            break;
          }
          case 80: {
            BidQuantityCall = input.ReadInt64();
            break;
          }
          case 89: {
            AskPriceCall = input.ReadDouble();
            break;
          }
          case 96: {
            AskQuantityCall = input.ReadInt64();
            break;
          }
          case 105: {
            EstPriceCall = input.ReadDouble();
            break;
          }
          case 113: {
            BidPricePut = input.ReadDouble();
            break;
          }
          case 120: {
            BidQuantityPut = input.ReadInt64();
            break;
          }
          case 129: {
            AskPricePut = input.ReadDouble();
            break;
          }
          case 136: {
            AskQuantityPut = input.ReadInt64();
            break;
          }
          case 145: {
            EstPricePut = input.ReadDouble();
            break;
          }
          case 152: {
            Expiration = input.ReadUInt64();
            break;
          }
          case 161: {
            Vol = input.ReadDouble();
            break;
          }
          case 169: {
            D0 = input.ReadDouble();
            break;
          }
          case 177: {
            Tte = input.ReadDouble();
            break;
          }
          case 185: {
            FitNormVol = input.ReadDouble();
            break;
          }
          case 193: {
            FitVol = input.ReadDouble();
            break;
          }
          case 201: {
            FitNormVolDlogstrike = input.ReadDouble();
            break;
          }
          case 209: {
            FitNormVolDlogstrike2 = input.ReadDouble();
            break;
          }
          case 217: {
            FitPriceCall = input.ReadDouble();
            break;
          }
          case 225: {
            FitPricePut = input.ReadDouble();
            break;
          }
          case 233: {
            FitDeltaCall = input.ReadDouble();
            break;
          }
          case 241: {
            FitDeltaPut = input.ReadDouble();
            break;
          }
          case 249: {
            FitVegaCall = input.ReadDouble();
            break;
          }
          case 257: {
            FitVegaPut = input.ReadDouble();
            break;
          }
          case 265: {
            FitGammaCall = input.ReadDouble();
            break;
          }
          case 273: {
            FitGammaPut = input.ReadDouble();
            break;
          }
          case 281: {
            FitCharmCall = input.ReadDouble();
            break;
          }
          case 289: {
            FitCharmPut = input.ReadDouble();
            break;
          }
          case 297: {
            FitVannaCall = input.ReadDouble();
            break;
          }
          case 305: {
            FitVannaPut = input.ReadDouble();
            break;
          }
          case 313: {
            FitSkewDeltaCall = input.ReadDouble();
            break;
          }
          case 321: {
            FitSkewDeltaPut = input.ReadDouble();
            break;
          }
          case 329: {
            FitSkewGammaCall = input.ReadDouble();
            break;
          }
          case 337: {
            FitSkewGammaPut = input.ReadDouble();
            break;
          }
          case 345: {
            FitThetaCall = input.ReadDouble();
            break;
          }
          case 353: {
            FitThetaPut = input.ReadDouble();
            break;
          }
          case 361: {
            FitVolThetaCall = input.ReadDouble();
            break;
          }
          case 369: {
            FitVolThetaPut = input.ReadDouble();
            break;
          }
          case 377: {
            ProbabilityItmCall = input.ReadDouble();
            break;
          }
          case 385: {
            ProbabilityItmPut = input.ReadDouble();
            break;
          }
          case 393: {
            ImpliedPdf = input.ReadDouble();
            break;
          }
          case 401: {
            VcrBase = input.ReadDouble();
            break;
          }
          case 409: {
            VcrSlopeMultiplier = input.ReadDouble();
            break;
          }
          case 417: {
            VcrTotal = input.ReadDouble();
            break;
          }
          case 425: {
            AtmVol = input.ReadDouble();
            break;
          }
          case 433: {
            AtmVolDlogstrike = input.ReadDouble();
            break;
          }
          case 441: {
            VolDlogstrike = input.ReadDouble();
            break;
          }
          case 449: {
            VolDlogstrike2 = input.ReadDouble();
            break;
          }
          case 457: {
            VolDlogforward = input.ReadDouble();
            break;
          }
          case 465: {
            VolDlogforward2 = input.ReadDouble();
            break;
          }
          case 473: {
            Logmoneyness = input.ReadDouble();
            break;
          }
          case 482: {
            Underlying = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
